<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pbboard.men.mapper.MenMapper">
    <!-- 제품 상세 조회 -->
    <select id="selectProduct" resultType="com.pbboard.men.domain.ProductVO">
        select seq, name, brand, image,
         to_char(price, '999,999,999') as price
         , summary_desc, detail_desc
        , sub_image1 as subImage1
        , sub_image2 as subImage2
        , sub_image3 as subImage3
        , sub_image4 as subImage4
        from men_product_tbl2 where seq = #{seq}
    </select>

    <!-- 제품 목록 조회 -->
    <select id="selectProductList" parameterType="com.pbboard.men.domain.SearchCriteria"
                            resultType="com.pbboard.men.domain.ProductVO">
        select seq, name, to_char(price, '999,999,999,999') as price , image, review, score, likeNum, regDt,
        disYn, selYn
        from
        (select seq, name, price, image,
            (select count(r.seq) as review from review_tbl3 r, order_details_tbl3 od
                where od.product_seq = men_product_tbl2.seq
                and r.order_details_seq = od.seq
                group by men_product_tbl2.seq)
            as review,
            (select round(sum(r.score) / count(r.seq)) as score from review_tbl3 r, order_details_tbl3 od
            where od.product_seq = men_product_tbl2.seq
            and r.order_details_seq = od.seq
            group by men_product_tbl2.seq)
            as score,
            (select count(*) from product_like_tbl3 p
            where p.product_seq = men_product_tbl2.seq
            group by men_product_tbl2.seq)
            as likeNum,
            reg_dt as regDt,
            dis_yn as disYn,
            sel_yn as selYn
        ,row_number()
        over(order by (select count(*) from product_like_tbl3 p
            where p.product_seq = men_product_tbl2.seq
            group by men_product_tbl2.seq) desc nulls last) as rNum
        from men_product_tbl2 where men_product_tbl2.dis_Yn = 'y'
        ) where rNum between #{rowStart} and #{rowEnd}
        order by likeNum desc nulls last
    </select>

    <!-- 목록 개수 -->
    <select id="countProduct" parameterType="com.pbboard.men.domain.SearchCriteria"
            resultType="int">
        <![CDATA[
        select count(seq)
        from men_product_tbl2
        where seq > 0
        and dis_yn = 'y'
        ]]>
        <include refid="count"></include>
    </select>

    <sql id="search">
        <if test='category != ""'>
            where catecode = #{category}
        </if>
    </sql>
    <sql id="count">
        <if test='category != ""'>
            and catecode= #{category}
        </if>
    </sql>

    <!-- 옵션 조회 -->
    <select id="selectOption" parameterType="int" resultType="com.pbboard.men.domain.OptionVO">
        select product_seq as productSeq ,
         name as optionName,
         wm_concat(value) as optionValue
        from option_tbl2
        where product_seq = #{seq}
        group by name, product_seq
    </select>

    <!-- 리뷰 목록 조회 -->
    <select id="selectReviewList" parameterType="int"
                        resultType="com.pbboard.men.domain.ReviewVO">
       select u.nickname as nickName
        , r.content as content
        , r.score as score
        , to_char(r.reg_dt, 'yyyy-MM-dd hh:mi') as regDt
        from review_tbl3 r, order_details_tbl3 od, user_tbl3 u
        where u.seq = r.user_seq
        and od.seq = r.order_details_seq
        and od.product_seq = #{productSeq}
        order by r.reg_dt desc
    </select>

    <!-- 장바구니 담기 / 중복 불가 -->
    <insert id="insertCart" parameterType="com.pbboard.men.domain.CartDTO">
        merge into cart_tbl3
        using dual on
        (product_seq = ${productSeq} and user_seq = #{userSeq}
        <include refid="optionName"></include>)
        when matched then
        update set
        quantity = ${quantity}
        when not matched then
        insert(seq, product_seq, option_name, quantity, user_seq)
        values(cart_sequence.nextVal, ${productSeq}, #{optionName, jdbcType=VARCHAR}, ${quantity}, #{userSeq})
    </insert>

    <sql id="optionName">
        <if test='optionName != ""'>
            and option_name=#{optionName}
        </if>
    </sql>

    <!-- 옵션 재고 확인 -->
    <select id="checkStockQuantity" parameterType="com.pbboard.men.domain.OptionVO"
                                    resultType="int">
        select quantity
        from stock_tbl3
        where product_seq = #{productSeq}
        and <include refid="checkOptionName"></include>
    </select>

    <sql id="checkOptionName">
        <if test='optionName == ""'>
            name is null
        </if>
        <if test='optionName != ""'>
            name = #{optionName}
        </if>
    </sql>

    <select id="selectQnaList" parameterType="com.pbboard.men.domain.SearchCriteria"
                                resultType="com.pbboard.men.domain.QnaVO">
        select seq, ansYn, qnaType, qnaTitle, qnaContent, replyContent , replyDt , replyUserNickName , userId, regDt
	        from (
             select pq.seq,
                pq.ans_yn as ansYn,
                pq.qna_type as qnaType,
                pq.qna_title as qnaTitle,
                pq.qna_content as qnaContent,
                pq.reply_content as replyContent,
                to_char(pq.reply_dt, 'yyyy.MM.dd') as replyDt,
                (select nickname from user_tbl3 where seq = pq.reply_user_seq) as replyUserNickName,
                substr(u.id, 1, 1) || lpad('*', length(u.id)- 1, '*') as userId,
              to_char(pq.reg_dt, 'yyyy-MM-dd') as regDt,
			    row_number()
			    over(order by pq.reg_dt desc) as rNum
        from product_qna_tbl3 pq, user_tbl3 u
        where pq.product_seq = #{productSeq}
        and u.seq = pq.user_seq
        ) where rNum between #{rowStart} and #{rowEnd}
    </select>
   <select id="selectQnaList2" parameterType="com.pbboard.men.domain.SearchCriteria"
                                resultType="com.pbboard.men.domain.QnaVO">
        select seq, ansYn, qnaType, qnaTitle, qnaContent, replyContent , replyDt , replyUserNickName , userId, regDt
	        from (
             select pq.seq,
                pq.ans_yn as ansYn,
                pq.qna_type as qnaType,
                pq.qna_title as qnaTitle,
                pq.qna_content as qnaContent,
                pq.reply_content as replyContent,
                to_char(pq.reply_dt, 'yyyy.MM.dd') as replyDt,
                (select nickname from user_tbl3 where seq = pq.reply_user_seq) as replyUserNickName,
                substr(u.id, 1, 1) || lpad('*', length(u.id)- 1, '*') as userId,
              to_char(pq.reg_dt, 'yyyy-MM-dd') as regDt,
			    row_number()
			    over(order by pq.reg_dt desc) as rNum
        from product_qna_tbl3 pq, user_tbl3 u
        where pq.product_seq = #{productSeq}
        and u.seq = pq.user_seq
        ) where rNum between #{rowStart} and #{rowEnd}
    </select>

    <select id="countQna" parameterType="int"
            resultType="int">
        select count(seq)
        from product_qna_tbl3
        where product_seq = #{seq}
    </select>

    <insert id="insertQna" parameterType="com.pbboard.men.domain.QnaDTO">
        insert into product_qna_tbl3
        (seq, product_seq, user_seq, qna_type, qna_title, qna_content
        , reg_dt, mod_dt, ans_yn, sec_yn)
        values(product_qna_sequence.nextval, #{productSeq}, #{userSeq}
        , #{qnaType},  #{qnaTitle}, #{qnaContent} , sysDate, null, 'n', 'n')
    </insert>

    <select id="selectProductLike" parameterType="hashMap"
                                    resultType="Integer">
        select count(*)
        from product_like_tbl3
        where product_seq = #{productSeq}
        and user_seq = #{userSeq}
    </select>

    <delete id="deleteProductLike" parameterType="hashMap">
        delete
        from product_like_tbl3
        where product_seq=  #{productSeq}
        and user_seq = #{userSeq}
    </delete>

    <insert id="insertProductLike" parameterType="hashMap">
        insert
        into product_like_tbl3
        values(product_like_sequences.nextval, #{productSeq}, #{userSeq})
    </insert>
</mapper>